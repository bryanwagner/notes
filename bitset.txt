Hyperloglog:
http://antirez.com/news/75
https://en.wikipedia.org/wiki/HyperLogLog
https://engineering.fb.com/data-infrastructure/hyperloglog/
https://blog.acolyer.org/2016/03/17/hyperloglog-in-practice-algorithmic-engineering-of-a-state-of-the-art-cardinality-estimation-algorithm/
https://rollout.io/blog/counting-distinct-values-with-hyperloglog/
https://bravenewgeek.com/tag/hyperloglog/

HLL Libraries:
https://github.com/search?o=desc&p=2&q=hyperloglog&s=stars&type=Repositories
Java: https://github.com/aggregateknowledge/java-hll
Java: https://github.com/prasanthj/hyperloglog
Go: https://github.com/axiomhq/hyperloglog
Rust: https://docs.rs/pdatastructs/0.5.0/x86_64-pc-windows-msvc/pdatastructs/hyperloglog/struct.HyperLogLog.html
      https://github.com/crepererum/pdatastructs.rs
Rust: https://github.com/jedisct1/rust-hyperloglog

HLL Bench (Java): https://github.com/t3rmin4t0r/hll-perf

Hash:
xxHash:
http://cyan4973.github.io/xxHash/
Farmhash:
https://github.com/google/farmhash
t1ha:
https://github.com/erthink/t1ha
Meow Hash:
https://github.com/cmuratori/meow_hash
https://mollyrocket.com/meowhash
which uses AES in a non-cryptographic way:
https://en.wikipedia.org/wiki/AES_instruction_set#New_instructions
https://twitter.com/cmuratori/status/1055525847128432640/photo/1
Benchmark:
https://github.com/rurban/smhasher/
^ this is basically recommending xxHash as the best in terms of quality/speed/portability

Hashing links from email:
https://en.wikipedia.org/wiki/Perfect_hash_function
https://cyan4973.github.io/xxHash/
https://greenrobot.org/essentials/features/performant-hash-functions-for-java/comparison-of-hash-functions/
https://softwareengineering.stackexchange.com/questions/49550/which-hashing-algorithm-is-best-for-uniqueness-and-speed/145633#145633  (older algorithms, but a good analysis)
https://github.com/koron/java-xxhash-benchmark
https://github.com/JCash/xxHash-1
https://nickbabcock.github.io/Farmhash.Sharp/articles/benchmarks.html   ***
https://github.com/google/farmhash
https://github.com/ravendb/ravendb/blob/v4.2/src/Sparrow/Hashing.cs

https://roaringbitmap.org/about/
https://github.com/RoaringBitmap/RoaringBitmap
https://github.com/aviggiano/redis-roaring
https://aras-p.info/blog/2016/08/02/Hash-Functions-all-the-way-down/
https://moinakg.wordpress.com/2013/01/19/vectorizing-xxhash-for-fun-and-profit/
https://github.com/aappleby/smhasher

https://www.ietf.org/rfc/rfc2119.txt

GCC:
https://gcc.gnu.org/releases.html
Clang vs GCC for my Linux Development project
https://stackoverflow.com/a/8208827/759719
Difference between using Makefile and CMake to compile the code
https://stackoverflow.com/a/25790020/759719
C vs C++
https://medium.com/nybles/c-vs-c-vs-c-14-a-running-time-comparision-bba9942923c3
Clang performance:
https://clang.llvm.org/features.html#performance
GCC vs Clang:
https://medium.com/@alitech_2017/gcc-vs-clang-llvm-an-in-depth-comparison-of-c-c-compilers-899ede2be378
C11 standard:
http://www.open-std.org/JTC1/SC22/WG14/www/docs/n1570.pdf
How to C in 2016:
https://matt.sh/howto-c
Linux Kernel Coding Style:
https://slurm.schedmd.com/coding_style.pdf
Modern C:
https://modernc.gforge.inria.fr/
Unit Testing C Code:
https://stackoverflow.com/a/65845/759719
Check:
https://github.com/libcheck/check
https://libcheck.github.io/check/doc/check_html/check_3.html
MinGW Getting started:
http://www.mingw.org/wiki/Getting_Started
An overview of build systems (mostly for C++ projects)
https://medium.com/@julienjorge/an-overview-of-build-systems-mostly-for-c-projects-ac9931494444
CMake documentation:
https://cmake.org/documentation/
CMake tutorial:
https://cmake.org/cmake-tutorial/
CMake for Visual C++ developers:
https://www.codeproject.com/Articles/1181455/A-CMake-tutorial-for-Visual-Cplusplus-developers

CLion:
https://www.jetbrains.com/help/clion/quick-tutorial-on-configuring-clion-on-windows.html

SIMD:
https://www.infoworld.com/article/3175127/simd-intrinsics-aren-t-so-scary-but-should-we-use-them.html

Templates:
https://github.com/topics/makefile-template
https://github.com/TheNetAdmin/Makefile-Templates/tree/master/BigProject
https://github.com/roxma/easymake

Library lists:
https://github.com/kozross/awesome-c
https://awesome-cpp.readthedocs.io/en/latest/README.html
http://fffaraz.github.io/awesome-cpp/
https://github.com/fffaraz/awesome-cpp
https://github.com/uhub/awesome-c
https://github.com/Bfgeshka/awesome-c

CLI:
https://github.com/lastpass/lastpass-cli

Benchmark harness:
https://github.com/okuvshynov/b63

Collections-C (LGPL 3):
https://github.com/srdja/Collections-C

Packed Array:
https://github.com/gpakosz/PackedArray

C-Algorithms (check out Bloom Filter):
https://github.com/fragglet/c-algorithms

Jemalloc (probably worth a look, used in newer versions of MRI Ruby):
https://github.com/jemalloc/jemalloc

RAII-like cleanup function for C:
https://stackoverflow.com/a/368731/759719

try fread for large file streaming (or mmap but that's more volatile):
https://lemire.me/blog/2012/06/26/which-is-fastest-read-fread-ifstream-or-mmap/
https://www.boost.org/doc/libs/1_54_0/doc/html/interprocess/sharedmemorybetweenprocesses.html#interprocess.sharedmemorybetweenprocesses.mapped_file


Streaming data over sockets:
https://www.tenouk.com/Module40c.html
https://www.softlab.ntua.gr/facilities/documentation/unix/unix-socket-faq/unix-socket-faq-2.html
http://www.cplusplus.com/forum/lounge/212719/
UDP to local machine is dangerous:
https://stackoverflow.com/a/2128745/759719
Fastest way to network locally could be this:
Process process = Runtime.getRuntime().exec("your command"); to popen:
https://stackoverflow.com/a/2887663/759719
https://www.ibm.com/support/knowledgecenter/en/SSLTBW_2.2.0/com.ibm.zos.v2r2.hala001/stms.htm
https://en.wikibooks.org/wiki/C_Programming/Stream_IO
https://en.wikibooks.org/wiki/C_Programming/Networking_in_UNIX
http://man7.org/linux/man-pages/man3/popen.3.html






